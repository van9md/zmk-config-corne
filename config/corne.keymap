/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp LS(N1)  &kp LS(N2)     &kp LS(N3)    &kp LS(N4)      &kp LS(N5)    &kp LS(N6)        &kp LS(N7)            &kp LS(N8)  &kp LS(N9)             &kp LS(N0)         &kp LS(MINUS)
&kp CAPSLOCK  &kp N1      &kp N2         &kp N3        &kp N4          &kp N5        &kp N6            &kp N7                &kp N8      &kp N9                 &kp N0             &kp MINUS
&kp ESCAPE    &kp SLASH   &kp LS(COMMA)  &kp LS(BSLH)  &kp LS(PERIOD)  &trans        &kp LEFT_BRACKET  &kp LS(LEFT_BRACKET)  &kp EQUAL   &kp LS(RIGHT_BRACKET)  &kp RIGHT_BRACKET  &kp LS(EQUAL)
                                         &kp LGUI      &trans          &kp SPACE     &kp RET           &trans                &kp DEL
            >;
        };
    };
};
